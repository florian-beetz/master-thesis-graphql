type Item @key(fields: "id") @extends {
    id: ID! @external
}

type ItemStock @key(fields: "id") @extends {
    id: ID! @external
}

type Order @key(fields: "id") {
    id: ID!
    positions: [OrderPosition]!
}

enum OrderStatus {
    CREATED
    PAYMENT_RECEIVED
    SHIPPED
    CANCELED
}

type OrderPosition {
    item: Item!
    stock: [ItemStockPosition]!
    amount: Int!
}

type ItemStockPosition {
    amount: Int!
    stock: ItemStock!
}

type Query {
    order(id: ID!): Order
}

input OrderPositionInput {
    itemId: ID!
    amount: Int!
}

interface ApiResponse {
    code: String!
    success: Boolean!
    message: String
}

type CreateOrderResponse implements ApiResponse {
    order: Order

    code: String!
    success: Boolean!
    message: String
}

type Mutation {
    createOrder(positions: [OrderPositionInput]!): CreateOrderResponse
}