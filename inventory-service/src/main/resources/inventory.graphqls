type Item @key(fields: "id") {
    id: ID!
    title: String!
    description: String
    price: Float!

    stock(page: Int, size: Int): [ItemStock]

    totalAvailable: Int!
    totalInStock: Int!
}

type Warehouse @key(fields: "id") {
    id: ID!
    name: String!

    stock(page: Int, size: Int): [ItemStock]
}

type ItemStock @key(fields: "id") {
    id: ID!
    item: Item!
    warehouse: Warehouse!
    inStock: Int
    available: Int
}

type Query {
    items(page: Int, size: Int, ids: [ID!]): [Item]
    item(id: ID!): Item

    warehouses(page: Int, size: Int): [Warehouse]
    warehouse(id: ID!): Warehouse
}

interface ApiResponse {
    code: String!
    success: Boolean!
    message: String
}

type ReservationPosition {
    stock: ItemStock!
    amount: Int!

    item: Item!
}

input ReservationPositionInput {
    stockId: ID!
    amount: Int!
}

type ReservationResponse implements ApiResponse {
    code: String!
    success: Boolean!
    message: String

    positions: [ReservationPosition]
}

type BookOutResponse implements ApiResponse {
    code: String!
    success: Boolean!
    message: String
}

type CancelReservationsResponse implements ApiResponse {
    code: String!
    success: Boolean!
    message: String
}

input StockPosition {
    stockId: ID!
    amount: Int!
}

input BookOutInput {
    positions: [StockPosition]!
}

type Mutation {
    createItem(title: String!, description: String, price: Float!): Item

    createWarehouse(name: String!): Warehouse

    createItemStock(itemId: ID!, warehouseId: ID!, inStock: Int!, available: Int): ItemStock

    reserveItems(itemId: ID!, amount: Int!): ReservationResponse!

    bookOutItems(bookOutInput: BookOutInput!): BookOutResponse!

    cancelReservations(reservations: [ReservationPositionInput]!): CancelReservationsResponse!
}